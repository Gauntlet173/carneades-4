meta:
  title: Porsche Example
  notes: >
    Illustrates support for Issue-Based Information Systems (IBIS)
    and multi-criteria decision analysis.
  source: >
    Brewka, Gerhard, and Thomas F. Gordon. "How to Buy a Porsche: An
    Approach to Defeasible Decision Making ." Working Notes of the
    AAAI-94 Workshop on Computational Dialectics. Seattle, Washington,
    1994. 28-38.

# All predicates need to be declared in the language, since they
# will be compiled to CHR constraints, which must be declared in CHR.
# Functors for constructing compound terms and atoms denoting individuals
# are not declared (currently)
# Predicates, functors and atoms must obey Prolog lexical rules.
language:
  buy/1: Buy a %v.
  price/2: The price of a %v is %v.
  type/2: A %v is a %v car.
  speed/2: The speed of a %v is %v.
  safety/2: The safety of a %v is %v.
  advertising/2: Advertising claims %v are %v.
  gov_stats/2: Government statistics show %v to %v safe.

# Argument scheme names must be Prolog atoms.
# Parameters are Prolog variables and thus begin with a capital letter.
# Argument schemes have been extended with weighing functions and with
# multiple conclusions, deletions and guards to allow any CHR rule
# to be expressed.
# Exceptions can be modelled alternatively as undercutters in separate schemes.
argument_schemes:
  gov_stats_scheme:
      weight:
        constant: 0.8
      variables: [C,S]
      premises:
        1: gov_stats(C,S)
      conclusions:
        - safety(C,S)

  advertising_scheme:
      weight:
        constant: 0.4  
      variables: [C,S]
      premises:
        1: advertising(C,S)
      conclusions:
        - safety(C,S)

  car_buying_scheme:
      variables: [C,P,S,F,T]  
      meta:
          notes: >
            This scheme illustrates the use of weighing functions for
            multi-criteria decision analysis.
      weight:
          criteria:
            hard: []  # role names of premises which must be in
            soft:
              # weighted sum of soft constraints
              price:
                  ## factor: any positive number 
                  ## the factors will be converted into percentages of
                  ## to total sum of all factors
                  factor: 2  
                  values:
                    low: 1.0
                    medium: 0.5
                    high: 0.0
              type:
                  factor: 2
                  values:
                    sports: 0.0
                    sedan: 0.5
                    family: 1.0
              speed:
                  factor: 2
                  values:
                    slow: 0.0    # < 100 km/hr
                    medium: 1.0  # > 100 and < 200 km/hr
                    fast: 0.5    # >= 200 km/hr
              safety:
                  factor: 4
                  values:
                      low: 0.0
                      medium: 0.5
                      high: 1.0
      premises:
          price: price(C,P)
          type: type(C,T)
          speed: speed(C,S)
          safety: safety(C,F)
      conclusions:    # list of atomic formulas or schema variables
          - buy(C)

issue_schemes:
    buy: ["buy(O1)", "...", "buy(On)"]
    safety: 
      - safety(O,V1)
      - ...
      - safety(O,Vn)
    price: ["price(O,P1)", "...", "price(O,Pn)"]
    speed: ["speed(O,S1)", "...", "speed(O,Sn)"]
    type: ["type(O,T1)", "...", "type(O,Tn)"]
    not:  ["Â¬P", "P"]

statements:
  buy(porsche): Buy a Porsche.
  buy(volvo): Buy a Volvo.
  price(volvo,medium): Volvos have a medium price.
  type(volvo,family): Volvos are family cars.
  speed(volvo,medium): Volvos have a medium maximum speed.
  safety(volvo,high): Volvos are very safe.
  safety(volvo,medium):  Volvos are fairly safe.
  type(porsche,sports): Porsches are sports cars.
  price(porsche,high): Porsches are expensive.
  safety(porsche,medium): Porsches are fairly safe.
  speed(porsche,fast): Porsches are fast.
  advertising(volvo,high): Volvo advertising claims Volvos are very safe.
  gov_stats(volvo,medium): Government statistics show Volvos to be fairly safe.

# issues:
#   i1:
#     positions: [buy(porsche), buy(volvo)]
#   i2:
#     positions:
#       - safety(volvo,medium)
#       - safety(volvo,high)

# arguments:
#   a1:
#     scheme: car_buying_scheme
#     conclusion: buy(porsche)
#     premises:
#       - type(porsche,sports)
#       - price(porsche,high)
#       - safety(porsche,medium)
#       - speed(porsche,fast)
#   a2:
#     scheme: car_buying_scheme
#     conclusion: buy(volvo)
#     premises:
#       - type(volvo,family)
#       - price(volvo,medium)
#       - speed(volvo,medium)
#       - safety(volvo,high)
#   a3:
#     scheme: advertising_scheme
#     conclusion: safety(volvo,high)
#     premises:
#       - advertising(volvo,high)
#   a4:
#     scheme: gov_stats_scheme
#     conclusion: safety(volvo,medium)
#     premises:
#       - gov_stats(volvo,medium)

assumptions:
    - advertising(volvo,high)
    - gov_stats(volvo,medium)
    - price(volvo,medium)
    - speed(volvo,medium)
    - type(volvo,family)
    - type(porsche,sports)
    - price(porsche,high)
    - safety(porsche,medium)
    - speed(porsche,fast)

tests:
  in: 
    - advertising(volvo,high)
    - gov_stats(volvo,medium)
    - price(volvo,medium)
    - speed(volvo,medium)
    - type(volvo,family)
    - type(porsche,sports)
    - price(porsche,high)
    - safety(porsche,medium)
    - speed(porsche,fast)
    - safety(volvo,medium)
    - buy(volvo)
  out:
    - buy(porsche)
    - safety(volvo,high)

